// Generated by CoffeeScript 1.4.0
(function() {
  var MenuItem, Radial;

  MenuItem = (function() {

    function MenuItem(text, angle, radius, originNode) {
      this.text = text;
      this.angle = angle;
      this.radius = radius;
      this.originNode = originNode;
      this.originNode.style.display = 'none';
    }

    MenuItem.prototype.setPaper = function(paper) {
      this.paper = paper;
    };

    MenuItem.prototype.render = function() {
      var boxDimensions;
      this.paper.setStart();
      this.textElement = this.paper.text(this.radius, 0, " " + this.text + " ");
      this.textElement.attr({
        'font-size': 15,
        'text-anchor': 'start'
      });
      boxDimensions = this.textElement.getBBox();
      this.boxElement = this.paper.rect(boxDimensions.x, boxDimensions.y, boxDimensions.width, boxDimensions.height);
      this.boxElement.attr({
        fill: '#99f',
        stroke: 0
      });
      this.textElement.toFront();
      this.set = this.paper.setFinish();
      this.set.attr({
        cursor: 'pointer'
      });
      if (this.eventsBound == null) {
        return this.bindEvents();
      }
    };

    MenuItem.prototype.bindEvents = function() {
      var _this = this;
      this.eventsBound = true;
      this.set.mouseover(function() {
        var boxAttrs;
        boxAttrs = {
          fill: '#44f'
        };
        return _this.boxElement.animate(boxAttrs, 400, '<>');
      });
      return this.set.mouseout(function() {
        var boxAttrs;
        boxAttrs = {
          fill: '#99f'
        };
        return _this.boxElement.animate(boxAttrs, 400, '<>');
      });
    };

    MenuItem.prototype.setAngle = function(angle) {
      this.angle = angle;
      return this.show();
    };

    MenuItem.prototype.hide = function() {
      var newAttributes;
      newAttributes = {
        transform: "r-10,0,0"
      };
      return this.set.animate(newAttributes, 800, "<");
    };

    MenuItem.prototype.show = function() {
      var newAttributes;
      newAttributes = {
        transform: "r" + this.angle + ",0,0"
      };
      return this.set.animate(newAttributes, 800, "<>");
    };

    return MenuItem;

  })();

  Radial = (function() {

    function Radial(domSource, domTarget, radius, width, height) {
      var aNode, liNode, _i, _j, _len, _len1, _menuRef, _ref, _ref1;
      this.domSource = domSource;
      this.domTarget = domTarget != null ? domTarget : this.domSource;
      this.radius = radius;
      this.width = width != null ? width : 200;
      this.height = height != null ? height : 200;
      this.items = [];
      _ref = this.domSource.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        liNode = _ref[_i];
        if (liNode.nodeName !== 'LI') {
          throw new Error("Expected, <li> child nodes, found " + liNode.nodeName);
        }
        _ref1 = liNode.childNodes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          aNode = _ref1[_j];
          if (aNode.nodeName !== 'A') {
            throw new Error("Expected, <a> grandchild node, found " + aNode.nodeName);
          }
          this.addItem(aNode);
        }
      }
      _menuRef = this;
      this.itemsShown = false;
      new Raphael(this.domTarget, this.width, this.height, function() {
        _menuRef.paper = this;
        return _menuRef.render();
      });
    }

    Radial.prototype.render = function() {
      var currentAngle, idx, individualSpan, item, totalAvailable, _i, _len, _ref,
        _this = this;
      this.center = this.paper.ellipse(0, 0, this.radius, this.radius);
      this.center.attr({
        fill: "r#55f-#99f",
        stroke: 0
      });
      totalAvailable = 80;
      individualSpan = totalAvailable / this.items.length;
      currentAngle = 10;
      _ref = this.items;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        item = _ref[idx];
        item.setPaper(this.paper);
        item.render();
        item.setAngle(currentAngle);
        currentAngle += individualSpan;
      }
      this.center.toFront();
      this.itemsShown = true;
      return this.center.click(function() {
        return _this.toggleItems();
      });
    };

    Radial.prototype.toggleItems = function() {
      var item, _i, _j, _len, _len1, _ref, _ref1;
      if (this.itemsShown) {
        _ref = this.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.hide();
        }
      }
      if (!this.itemsShown) {
        _ref1 = this.items;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          item.show();
        }
      }
      return this.itemsShown = !this.itemsShown;
    };

    Radial.prototype.addItem = function(aNode) {
      return this.items.push(new MenuItem(aNode.text, 0, this.radius, aNode));
    };

    return Radial;

  })();

  window.Radial = Radial;

}).call(this);
